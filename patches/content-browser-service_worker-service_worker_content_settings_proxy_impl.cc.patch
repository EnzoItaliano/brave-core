diff --git a/content/browser/service_worker/service_worker_content_settings_proxy_impl.cc b/content/browser/service_worker/service_worker_content_settings_proxy_impl.cc
index 32191ce8160d391c6456340fa91d2ab3cbb972e2..4a42c6935ea22040621794c90494b3c8b9bad7a4 100644
--- a/content/browser/service_worker/service_worker_content_settings_proxy_impl.cc
+++ b/content/browser/service_worker/service_worker_content_settings_proxy_impl.cc
@@ -93,6 +93,52 @@ void ServiceWorkerContentSettingsProxyImpl::AllowWebLocks(
       origin_.GetURL(), context_wrapper_->browser_context(), render_frames));
 }
 
+void ServiceWorkerContentSettingsProxyImpl::AllowFingerprinting(
+    AllowFingerprintingCallback callback) {
+  DCHECK_CURRENTLY_ON(BrowserThread::UI);
+  // May be shutting down.
+  if (!context_wrapper_->browser_context()) {
+    std::move(callback).Run(false);
+    return;
+  }
+  if (origin_.opaque()) {
+    std::move(callback).Run(false);
+    return;
+  }
+  // |render_frames| is used to show UI for the frames affected by the
+  // content setting. However, service worker is not necessarily associated
+  // with frames or making the request on behalf of frames,
+  // so just pass an empty |render_frames|.
+  std::vector<GlobalRenderFrameHostId> render_frames;
+  std::move(callback).Run(
+      GetContentClient()->browser()->AllowWorkerFingerprinting(
+          origin_.GetURL(), context_wrapper_->browser_context(),
+          render_frames));
+}
+
+void ServiceWorkerContentSettingsProxyImpl::GetBraveFarblingLevel(
+    GetBraveFarblingLevelCallback callback) {
+  DCHECK_CURRENTLY_ON(BrowserThread::UI);
+  // May be shutting down.
+  if (!context_wrapper_->browser_context()) {
+    std::move(callback).Run(1 /* OFF */);
+    return;
+  }
+  if (origin_.opaque()) {
+    std::move(callback).Run(1 /* OFF */);
+    return;
+  }
+  // |render_frames| is used to show UI for the frames affected by the
+  // content setting. However, service worker is not necessarily associated
+  // with frames or making the request on behalf of frames,
+  // so just pass an empty |render_frames|.
+  std::vector<GlobalRenderFrameHostId> render_frames;
+  std::move(callback).Run(
+      GetContentClient()->browser()->WorkerGetBraveFarblingLevel(
+          origin_.GetURL(), context_wrapper_->browser_context(),
+          render_frames));
+}
+
 void ServiceWorkerContentSettingsProxyImpl::RequestFileSystemAccessSync(
     RequestFileSystemAccessSyncCallback callback) {
   mojo::ReportBadMessage(
